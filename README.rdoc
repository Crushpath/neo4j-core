== Neo4j-core {<img src="https://secure.travis-ci.org/andreasronge/neo4j.png" />}[http://travis-ci.org/andreasronge/neo4j]

This gem only contains the JRuby mapping of the Neo4j graph database.
The neo4j.rb gem will be split up into two gems, neo4j-core and neo4j.
This gem will be included by neo4j 2.0.0 gem.

Changes from the neo4j.rb
* Use of YARD instead of RDoc
* Some tidy up of the API and code (e.g. Neo4j::Node#rels methods)
* Change of Ruby module structure.
* More RSpecs and more use of mocking combined with real testing of the Java layer
* Make sure that we retrieve relationships and nodes lazy if possible.
* Cypher Query DSL

This gem contains two modules: Neo4j and Neo4j::Core
The Neo4j module is public and the Neo4j::Core(::*) are private modules.

== The public API

{Neo4j::Node} The Java Neo4j Node

{Neo4j::Relationship} The Java Relationship

{Neo4j} The Database

== Example of Cypher DSL

(See RSpecs)


==== START n0=node(3) MATCH (n0)--(x) RETURN x
  start n = node(3); match n <=> :x; ret :x

==== START n0=node(3) MATCH (n0)--(x) RETURN x
  n = node(3); match n <=> :x; :x

==== START n0=node(3) MATCH (n0)--(x) RETURN x

  n = node(3); n <=> :x; :x

==== START n0=node(3) MATCH (n0)--(x) RETURN x

  node(3) <=> :x; :x

==== START r0=relationship(0) RETURN r0

  r = rel(0); ret r

==== START n0=node(1,2,3) RETURN n0
  n = node(1,2,3); ret n

==== START n0=node:fooindex_exact(name:A) RETURN n0

  query(FooIndex, "name:A")

==== START n0=node:fooindex_fulltext(name:A) RETURN n0

  query(FooIndex, "name:A", :fulltext)

==== START n0=node:fooindex_exact(name="A") RETURN n0

  lookup(FooIndex, "name", "A")

==== START n0=node:fooindex_fulltext(desc="A") RETURN n0

  lookup(FooIndex, "desc", "A")

==== START n0=node(1),n1=node(2) RETURN n0,n1

  a = node(1); b=node(2); ret(a,b)

==== START n0=node(1),n1=node(2) RETURN n0,n1

  [node(1), node(2)]

==== START n0=node(3) MATCH (n0)-->(x) RETURN x

  node(3) >> :x; :x

==== START n0=node(3) MATCH (n0)-[r]->(x) RETURN r

  node(3) >> [:r] >> :x; :r
